<?php
/**
 * Created by PhpStorm.
 * User: Abnet
 * Date: 2/28/2021
 * Time: 12:00 PM
 */

namespace Absoft\Line\Core\Engines\HTTP;

use Absoft\Line\App\Pager\Alert;
use Absoft\Line\Core\FaultHandling\Exceptions\FileNotFound;
use Absoft\Line\Core\FaultHandling\Exceptions\LineException;
use Absoft\Line\Core\HTTP\Request;
use Absoft\Line\Core\HTTP\Route;
use Absoft\Line\Core\HTTP\ViewResponse;
use Exception;

class ViewerEngine
{

    /**
     * @var Request
     * this field will hold the request given to this object
     * it will be constructed
     */
    private $request;
    private $GO_TO_ADDRESS = "";
    private $_main_address;

    function __construct(Request $request, $_main_folder){

        $this->request = $request;
        $this->_main_address = $_main_folder;

    }

    public static function errorDisplay(LineException $exception){

        $response = new ViewResponse();
        $response->prepareError($exception);
        $response->respond();

    }

    /**
     * this method will construct the address
     * by using the field request
     * @throws FileNotFound
     */
    private function constructAddress(){

        $this->GO_TO_ADDRESS = $this->_main_address."/apps/Templates/".$this->request->template;

        if(!file_exists($this->GO_TO_ADDRESS)){
            throw new FileNotFound("View ".$this->GO_TO_ADDRESS." not found!", __FILE__, __LINE__);
        }

    }

    /**
     * this method will render the view
     * by using the address generated by constructAddress() method
     */
    private function show(){

        try{

            $response = new ViewResponse();
            $response->prepare($this->GO_TO_ADDRESS);
            $response->respond();

        }catch (Exception $exception){
            $response = new ViewResponse();
            $response->prepareError();
            $response->respond();
        }

    }

    /**
     * @throws FileNotFound
     */
    public function start(){

        $this->constructAddress();
        $this->show();

    }

    public function route_address($name, $request_array = []){
        return Route::routeAddress($name, $request_array);
    }

    public function view_address($page_name, $sub_page, $request_array=[]){
        return Route::viewAddress($page_name, $sub_page, $request_array);
    }

    public function show_alert(){
        Alert::displayAlert();
    }

    public function set_alert_classname($success="", $info="", $error=""){

        Alert::setErrorClassName($error);
        Alert::setSuccessClassName($success);
        Alert::setInfoClassName($info);

    }

}
